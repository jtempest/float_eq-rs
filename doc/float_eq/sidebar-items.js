window.SIDEBAR_ITEMS = {"attr":[["derive_float_eq","Helper for deriving the various float_eq traits."]],"macro":[["assert_float_eq","Asserts that two floating point expressions are equal to each other."],["assert_float_ne","Asserts that two floating point expressions are not equal to each other."],["debug_assert_float_eq","Asserts that two floating point expressions are equal to each other."],["debug_assert_float_ne","Asserts that two floating point expressions are not equal to each other."],["float_eq","Checks if two floating point expressions are equal to each other."],["float_ne","Checks if two floating point expressions are not equal to each other."]],"struct":[["ComplexUlps","The absolute difference between two floating point `num::Complex<T>` instances in ULPs."]],"trait":[["AssertFloatEq","Debug context for when an assert fails."],["AssertFloatEqAll","Debug context for when an assert using an `all` check fails."],["FloatEq","Compare IEEE floating point values for equality using per-field tolerances."],["FloatEqAll","Compare IEEE floating point values for equality using a uniform tolerance."],["FloatEqDebugUlpsDiff","Per-field results of ULPs based diff calculations."],["FloatEqUlpsTol","Per-field tolerances for ULPs comparisons."]],"type":[["ComplexUlps32","[`ComplexUlps<T>`] type matching `num::Complex32`."],["ComplexUlps64","[`ComplexUlps<T>`] type matching `num::Complex64`."],["DebugUlpsDiff","Per-field results of ULPs based diff calculations."],["UlpsTol","Per-field tolerances for ULPs comparisons."]]};